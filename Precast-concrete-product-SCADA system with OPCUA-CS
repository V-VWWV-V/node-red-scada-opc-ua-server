[
    {
        "id": "data_simulator",
        "type": "inject",
        "z": "main_flow_tab",
        "name": "数据模拟器",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 330,
        "y": 280,
        "wires": [
            [
                "data_generator"
            ]
        ]
    },
    {
        "id": "data_generator",
        "type": "function",
        "z": "main_flow_tab",
        "name": "生产数据生成器",
        "func": "// 生产模块状态定义\nconst modules = [\n    { name: \"混凝土制备\", status: \"运行\", progress: 0, color: \"green\" },\n    { name: \"模具组装\", status: \"运行\", progress: 0, color: \"yellow\" },\n    { name: \"钢筋网片安装\", status: \"运行\", progress: 0, color: \"green\" },\n    { name: \"混凝土浇筑\", status: \"运行\", progress: 0, color: \"red\" },\n    { name: \"养护\", status: \"运行\", progress: 0, color: \"green\" },\n    { name: \"脱模与起吊\", status: \"运行\", progress: 0, color: \"green\" },\n    { name: \"成品质检\", status: \"运行\", progress: 0, color: \"green\" },\n    { name: \"入库管理\", status: \"运行\", progress: 0, color: \"green\" }\n];\n\n// 获取或初始化全局数据\nlet globalData = global.get(\"productionData\") || {\n    dailyTarget: 200,\n    dailyCompleted: 0,\n    currentHourProduced: 0,\n    modules: JSON.parse(JSON.stringify(modules)),  // 深拷贝避免引用同一个对象\n    alarms: [],\n    timestamp: Date.now()\n};\n\n// 模拟进度更新\nfor (let i = 0; i < globalData.modules.length; i++) {\n    let module = globalData.modules[i];\n    if (module.status === \"运行\") {\n        module.progress += Math.random() * 5;\n        if (module.progress > 100) {\n            module.progress = Math.random() * 20; // 重新开始新的生产周期\n            if (i === 0) { // 混凝土制备完成，增加产量\n                globalData.currentHourProduced += 1;\n                globalData.dailyCompleted += 1;\n            }\n        }\n    } else if (module.status === \"待料\") {\n        module.progress = 0;\n    } else if (module.status === \"故障\") {\n        module.progress = Math.max(0, module.progress - 1);\n    }\n}\n\nif (globalData.dailyCompleted >= globalData.dailyTarget) {\n    // 重置\n    globalData.dailyCompleted = 0;\n    globalData.currentHourProduced = 0;\n    globalData.alarms = [];\n    node.warn(\"日生产目标已达，已完成数量已重置为0\");\n}\n\n// 模拟报警\nif (Math.random() < 0.1) { // 10%概率产生新报警\n    const alarmTypes = [\n        \"温度超限报警\",\n        \"压力异常报警\",\n        \"料位低报警\",\n        \"设备故障报警\",\n        \"质量异常报警\"\n    ];\n    const priorities = [\"高\", \"中\", \"低\"];\n\n    globalData.alarms.push({\n        id: Date.now(),\n        type: alarmTypes[Math.floor(Math.random() * alarmTypes.length)],\n        priority: priorities[Math.floor(Math.random() * priorities.length)],\n        module: modules[Math.floor(Math.random() * modules.length)].name,\n        time: new Date().toLocaleTimeString()\n    });\n}\n\n// 限制报警数量\nif (globalData.alarms.length > 10) {\n    globalData.alarms = globalData.alarms.slice(-10);\n}\n\n// 更新时间戳\nglobalData.timestamp = Date.now();\n\n// ---- 扩展，整理模块状态文本，格式： 模块名 - 状态 - 进度%\nlet moduleTexts = globalData.modules.map(m => {\n    // 给进度保留1位小数，颜色信息可根据需求添加\n    return `${m.name} - ${m.status} - ${m.progress.toFixed(1)}%`;\n});\n\n// 整理报警文本，格式示例： 时间 [优先级] 报警类型 (模块)\nlet alarmTexts = globalData.alarms.map(a => {\n    return `${a.time} [${a.priority}] ${a.type} (${a.module})`;\n});\n\n// 保存更新后的数据\nglobal.set(\"productionData\", globalData);\nflow.set(\"precast_concrete_productionline1\", globalData);\n\n// 返回多路消息，可以拆分输出：\nreturn [\n    {\n        topic: \"stats\", payload: {\n            dailyTarget: globalData.dailyTarget,\n            dailyCompleted: globalData.dailyCompleted,\n            currentHourProduced: globalData.currentHourProduced,\n            completionRate: (globalData.dailyCompleted / globalData.dailyTarget * 100).toFixed(1),\n            timestamp: globalData.timestamp\n        }\n    },\n    { topic: \"modules\", payload: moduleTexts },\n    { topic: \"alarms\", payload: alarmTexts }\n];\n\n\n\n/*\n\n// 生产模块状态定义\nconst modules = [\n    {name: \"混凝土制备\", status: \"运行\", progress: 0, color: \"green\"},\n    {name: \"模具组装\", status: \"运行\", progress: 0, color: \"yellow\"},\n    {name: \"钢筋网片安装\", status: \"运行\", progress: 0, color: \"green\"},\n    {name: \"混凝土浇筑\", status: \"运行\", progress: 0, color: \"red\"},\n    {name: \"养护\", status: \"运行\", progress: 0, color: \"green\"},\n    {name: \"脱模与起吊\", status: \"运行\", progress: 0, color: \"green\"},\n    {name: \"成品质检\", status: \"运行\", progress: 0, color: \"green\"},\n    {name: \"入库管理\", status: \"运行\", progress: 0, color: \"green\"}\n];\n\n// 获取或初始化全局数据\nlet globalData = global.get(\"productionData\") || {\n    dailyTarget: 200,\n    dailyCompleted: 0,\n    currentHourProduced: 0,\n    modules: modules,\n    alarms: [],\n    timestamp: Date.now()\n};\n\n// 模拟进度更新\nfor(let i = 0; i < globalData.modules.length; i++) {\n    let module = globalData.modules[i];\n    if(module.status === \"运行\") {\n        module.progress += Math.random() * 5;\n        if(module.progress > 100) {\n            module.progress = Math.random() * 20; // 重新开始新的生产周期\n            if(i === 0) { // 混凝土制备完成，增加产量\n                globalData.currentHourProduced += 1;\n                globalData.dailyCompleted += 1;\n            }\n        }\n    } else if(module.status === \"待料\") {\n        module.progress = 0;\n    } else if(module.status === \"故障\") {\n        module.progress = Math.max(0, module.progress - 1);\n    }\n}\n\nif(globalData.dailyCompleted >= globalData.dailyTarget){\n    // 这里设置重置\n    globalData.dailyCompleted = 0;\n\n    // 如果需要，也可以重置 currentHourProduced 或其它变量\n    globalData.currentHourProduced = 0;\n\n    // 同时可以清空报警，或者做其它逻辑\n    globalData.alarms = [];\n\n    node.warn(\"日生产目标已达，已完成数量已重置为0\");\n}\n\n\n\n// 模拟报警\nif(Math.random() < 0.1) { // 10%概率产生新报警\n    const alarmTypes = [\n        \"温度超限报警\",\n        \"压力异常报警\", \n        \"料位低报警\",\n        \"设备故障报警\",\n        \"质量异常报警\"\n    ];\n    const priorities = [\"高\", \"中\", \"低\"];\n    \n    globalData.alarms.push({\n        id: Date.now(),\n        type: alarmTypes[Math.floor(Math.random() * alarmTypes.length)],\n        priority: priorities[Math.floor(Math.random() * priorities.length)],\n        module: modules[Math.floor(Math.random() * modules.length)].name,\n        time: new Date().toLocaleTimeString()\n    });\n}\n\n// 限制报警数量\nif(globalData.alarms.length > 10) {\n    globalData.alarms = globalData.alarms.slice(-10);\n}\n\n\n\n// 更新时间戳\nglobalData.timestamp = Date.now();\n\n// 保存全局数据\nglobal.set(\"productionData\", globalData);\n\n// 返回更新后的数据\nmsg.payload = globalData;\nreturn msg;\n\n*/",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 280,
        "wires": [
            [
                "overview_distributor",
                "20051ddd9e72c26e",
                "8bd7d6c4dc0d4897",
                "dd9c89f17ddc2f90",
                "42dff8e64a5b31d1",
                "module_data_distributor"
            ],
            [],
            [
                "83bb199f49935fac",
                "64427adfc6a7cfca",
                "438171a7dbb989fe",
                "f4791849e38e1a8b",
                "ad624104bcfc386b"
            ]
        ]
    },
    {
        "id": "overview_distributor",
        "type": "function",
        "z": "main_flow_tab",
        "d": true,
        "name": "总览数据分发器",
        "func": "const data = msg.payload;\n\n// 生产线状态模板\nconst statusTemplate = `\n<div style=\"display: flex; justify-content: space-around; margin: 20px 0; font-family: 'Microsoft YaHei', sans-serif;\">\n    <div style=\"text-align: center;\">\n        <div style=\"font-size: 24px; color: #4B7C95; margin-bottom: 5px;\">📊</div>\n        <div style=\"font-size: 14px; color: #666;\">今日目标</div>\n        <div style=\"font-size: 20px; font-weight: bold; color: #333;\">${data.dailyTarget}件</div>\n    </div>\n    <div style=\"text-align: center;\">\n        <div style=\"font-size: 24px; color: #4B7C95; margin-bottom: 5px;\">✅</div>\n        <div style=\"font-size: 14px; color: #666;\">已完成</div>\n        <div style=\"font-size: 20px; font-weight: bold; color: #28a745;\">${data.dailyCompleted}件</div>\n    </div>\n    <div style=\"text-align: center;\">\n        <div style=\"font-size: 24px; color: #4B7C95; margin-bottom: 5px;\">📈</div>\n        <div style=\"font-size: 14px; color: #666;\">完成率</div>\n        <div style=\"font-size: 20px; font-weight: bold; color: ${data.dailyCompleted/data.dailyTarget > 0.8 ? '#28a745' : '#ffc107'};\">${Math.round(data.dailyCompleted/data.dailyTarget*100)}%</div>\n    </div>\n    <div style=\"text-align: center;\">\n        <div style=\"font-size: 24px; color: #4B7C95; margin-bottom: 5px;\">🔔</div>\n        <div style=\"font-size: 14px; color: #666;\">活跃报警</div>\n        <div style=\"font-size: 20px; font-weight: bold; color: ${data.alarms.length > 5 ? '#dc3545' : '#28a745'};\">${data.alarms.length}条</div>\n    </div>\n</div>\n\n<div style=\"margin: 20px 0;\">\n    <h4 style=\"color: #4B7C95; margin-bottom: 15px;\">🏭 生产模块状态</h4>\n    <div style=\"display: grid; grid-template-columns: repeat(4, 1fr); gap: 15px;\">\n        ${data.modules.map((module, index) => {\n            const statusColors = {\n                '运行': '#28a745',\n                '待料': '#ffc107', \n                '故障': '#dc3545',\n                '维护': '#6c757d'\n            };\n            const statusColor = statusColors[module.status] || '#6c757d';\n            const progressWidth = Math.round(module.progress);\n            \n            return `\n            <div style=\"\n                background: linear-gradient(145deg, #f8f9fa, #e9ecef);\n                border-radius: 12px;\n                padding: 15px;\n                box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n                border-left: 4px solid ${statusColor};\n            \">\n                <div style=\"font-size: 12px; color: #666; margin-bottom: 5px;\">模块 ${index + 1}</div>\n                <div style=\"font-size: 14px; font-weight: bold; color: #333; margin-bottom: 8px;\">${module.name}</div>\n                <div style=\"\n                    display: inline-block;\n                    padding: 2px 8px;\n                    background: ${statusColor};\n                    color: white;\n                    border-radius: 12px;\n                    font-size: 11px;\n                    margin-bottom: 8px;\n                \">${module.status}</div>\n                <div style=\"\n                    background: #e9ecef;\n                    border-radius: 10px;\n                    height: 6px;\n                    overflow: hidden;\n                    margin-bottom: 5px;\n                \">\n                    <div style=\"\n                        background: ${statusColor};\n                        height: 100%;\n                        width: ${progressWidth}%;\n                        transition: width 0.3s ease;\n                    \"></div>\n                </div>\n                <div style=\"font-size: 10px; color: #666; text-align: right;\">${progressWidth}%</div>\n            </div>\n            `;\n        }).join('')}\n    </div>\n</div>\n`;\n\n\n// 发送状态模板\nnode.send([{payload: statusTemplate, topic: \"status_template\"}, null, null]);\n\n// 发送生产统计数据\n/*const statsData = {\n    labels: [\"目标\", \"完成\", \"剩余\"],\n    datasets: [{\n        data: [data.dailyTarget, data.dailyCompleted, Math.max(0, data.dailyTarget - data.dailyCompleted)],\n        backgroundColor: ['#4B7C95', '#28a745', '#e9ecef']\n    }]\n};\n*/\nconst statsData = [{\n    series: [\"数量\"],\n    data: [[data.dailyTarget, data.dailyCompleted, Math.max(0, data.dailyTarget - data.dailyCompleted)]],\n    labels: [\"目标\", \"完成\", \"剩余\"]\n}];\nnode.send([null, { payload: statsData, topic: \"production_chart\" }, null]);\n\n\n// 发送报警数据\nconst alarmHtml = `\n<div style=\"font-family: 'Microsoft YaHei', sans-serif;\">\n    ${data.alarms.length === 0 ? \n        '<div style=\"text-align: center; padding: 20px; color: #28a745;\">✅ 当前无活跃报警</div>' :\n        data.alarms.slice(-5).reverse().map(alarm => {\n            const priorityColors = {'高': '#dc3545', '中': '#ffc107', '低': '#17a2b8'};\n            const priorityColor = priorityColors[alarm.priority] || '#6c757d';\n            \n            return `\n            <div style=\"\n                margin-bottom: 10px;\n                padding: 12px;\n                border-radius: 8px;\n                border-left: 4px solid ${priorityColor};\n                background: #f8f9fa;\n            \">\n                <div style=\"display: flex; justify-content: between; align-items: center;\">\n                    <div>\n                        <div style=\"font-weight: bold; color: #333; margin-bottom: 2px;\">${alarm.type}</div>\n                        <div style=\"font-size: 12px; color: #666;\">${alarm.module} | ${alarm.time}</div>\n                    </div>\n                    <div style=\"\n                        background: ${priorityColor};\n                        color: white;\n                        padding: 2px 6px;\n                        border-radius: 4px;\n                        font-size: 10px;\n                        margin-left: 10px;\n                    \">${alarm.priority}</div>\n                </div>\n            </div>\n            `;\n        }).join('')\n    }\n</div>\n`;\n\nnode.send([null, null, {payload: alarmHtml, topic: \"alarm_list\"}]);\n\nreturn null;",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 280,
        "wires": [
            [
                "b5e77968ad47801a"
            ],
            [
                "production_chart"
            ],
            [
                "alarm_display"
            ]
        ]
    },
    {
        "id": "production_chart",
        "type": "ui_chart",
        "z": "main_flow_tab",
        "d": true,
        "name": "生产进度图表",
        "group": "overview_group2",
        "order": 1,
        "width": "6",
        "height": "4",
        "label": "今日生产进度",
        "chartType": "pie",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "暂无数据",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 30,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#4b7c95",
            "#28a745",
            "#e9ecef",
            "#ffc107",
            "#dc3545",
            "#17a2b8",
            "#6c757d",
            "#343a40",
            "#f8f9fa"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1800,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "alarm_display",
        "type": "ui_template",
        "z": "main_flow_tab",
        "d": true,
        "group": "overview_group3",
        "name": "报警信息显示",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<div ng-if=\"msg.payload\" ng-bind-html=\"msg.payload\"></div>\n<div ng-if=\"!msg.payload\" style=\"color:#aaa;text-align:center;padding:20px;\">暂无报警数据</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1800,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "module_data_distributor",
        "type": "function",
        "z": "main_flow_tab",
        "name": "模块数据分发器",
        "func": "const data = msg.payload;\n\n// 为每个模块生成具体的模拟数据\nconst moduleData = {\n    // 模块1: 混凝土制备\n    module1: {\n        materials: {\n            cement: 85 + Math.random() * 10,\n            sand: 70 + Math.random() * 15,\n            gravel: 90 + Math.random() * 8,\n            water: 95 + Math.random() * 5,\n            additive: 60 + Math.random() * 20\n        },\n        mixer: {\n            speed: 45 + Math.random() * 10,\n            power: 75 + Math.random() * 15,\n            temperature: 25 + Math.random() * 5\n        },\n        quality: {\n            slump: 180 + Math.random() * 20,\n            strength: 28 + Math.random() * 2,\n            density: 2400 + Math.random() * 50\n        }\n    },\n    // 模块2: 模具组装\n    module2: {\n        molds: {\n            available: 45,\n            inUse: 12,\n            cleaning: 3,\n            maintenance: 2\n        },\n        assembly: {\n            position_accuracy: 98.5 + Math.random() * 1,\n            lock_status: Math.random() > 0.1 ? \"已锁紧\" : \"待锁紧\",\n            cleaning_pressure: 2.5 + Math.random() * 0.3\n        }\n    },\n    // 模块3: 钢筋网片安装  \n    module3: {\n        rebar: {\n            inventory: 156,\n            specifications: \"Φ12@200\",\n            position_x: 1250.5 + Math.random() * 2,\n            position_y: 800.2 + Math.random() * 2,\n            installation_force: 850 + Math.random() * 100\n        },\n        mesh: {\n            inventory: 89,\n            specifications: \"200x200x6\",\n            coverage: 95 + Math.random() * 4\n        }\n    },\n    // 模块4: 混凝土浇筑\n    module4: {\n        pouring: {\n            flow_rate: 15.5 + Math.random() * 3,\n            pressure: 1.8 + Math.random() * 0.2,\n            temperature: 23 + Math.random() * 3,\n            height: 450 + Math.random() * 50\n        },\n        vibration: {\n            frequency: 50 + Math.random() * 5,\n            amplitude: 0.8 + Math.random() * 0.2,\n            duration: 120 + Math.random() * 30\n        }\n    },\n    // 模块5: 养护\n    module5: {\n        chamber1: {\n            temperature: 65 + Math.random() * 5,\n            humidity: 85 + Math.random() * 10,\n            pressure: 1.05 + Math.random() * 0.1,\n            time_remaining: 420 - Math.random() * 60\n        },\n        chamber2: {\n            temperature: 70 + Math.random() * 5,\n            humidity: 90 + Math.random() * 8,\n            pressure: 1.08 + Math.random() * 0.1,\n            time_remaining: 180 - Math.random() * 30\n        }\n    },\n    // 模块6: 脱模与起吊\n    module6: {\n        demolding: {\n            force: 1250 + Math.random() * 200,\n            success_rate: 98.5 + Math.random() * 1,\n            cycle_time: 180 + Math.random() * 30\n        },\n        crane: {\n            load: 2.5 + Math.random() * 0.5,\n            height: 8.5 + Math.random() * 1,\n            position: \"区域B-03\",\n            status: Math.random() > 0.1 ? \"正常\" : \"维护\"\n        }\n    },\n    // 模块7: 成品质检\n    module7: {\n        dimensions: {\n            length: 2998 + Math.random() * 4,\n            width: 1498 + Math.random() * 3,\n            height: 199.5 + Math.random() * 1,\n            tolerance: \"±2mm\"\n        },\n        quality: {\n            surface_grade: \"A级\",\n            strength_grade: \"C30\",\n            pass_rate: 96.5 + Math.random() * 2.5,\n            defect_count: Math.floor(Math.random() * 3)\n        }\n    },\n    // 模块8: 入库管理\n    module8: {\n        inventory: {\n            total_products: 2456,\n            today_in: data.dailyCompleted,\n            today_out: 145,\n            available_space: 85 + Math.random() * 10\n        },\n        logistics: {\n            pending_orders: 23,\n            shipping_today: 12,\n            location_A: 156,\n            location_B: 234,\n            location_C: 189\n        }\n    }\n};\n\n//flow.set(\"precast_concrete_productionline1\", moduleData);\n//flow.set(\"precast_line1.module1_concrete_preparation.cement\", moduleData.module1.materials.cement);\n\n// 模块1：混凝土制备\nflow.set(\"precast_concrete_productionline1.module1_concrete_preparation.materials.cement\", moduleData.module1.materials.cement);\nflow.set(\"precast_concrete_productionline1.module1_concrete_preparation.materials.sand\", moduleData.module1.materials.sand);\nflow.set(\"precast_concrete_productionline1.module1_concrete_preparation.materials.gravel\", moduleData.module1.materials.gravel);\nflow.set(\"precast_concrete_productionline1.module1_concrete_preparation.materials.water\", moduleData.module1.materials.water);\nflow.set(\"precast_concrete_productionline1.module1_concrete_preparation.materials.additive\", moduleData.module1.materials.additive);\nflow.set(\"precast_concrete_productionline1.module1_concrete_preparation.mixer.speed\", moduleData.module1.mixer.speed);\nflow.set(\"precast_concrete_productionline1.module1_concrete_preparation.mixer.power\", moduleData.module1.mixer.power);\nflow.set(\"precast_concrete_productionline1.module1_concrete_preparation.mixer.temperature\", moduleData.module1.mixer.temperature);\nflow.set(\"precast_concrete_productionline1.module1_concrete_preparation.quality.slump\", moduleData.module1.quality.slump);\nflow.set(\"precast_concrete_productionline1.module1_concrete_preparation.quality.strength\", moduleData.module1.quality.strength);\nflow.set(\"precast_concrete_productionline1.module1_concrete_preparation.quality.density\", moduleData.module1.quality.density);\n\n\n// 模块2：模具组装\nflow.set(\"precast_concrete_productionline1.module2_mold_assembly.molds.available\", moduleData.module2.molds.available);\nflow.set(\"precast_concrete_productionline1.module2_mold_assembly.molds.inUse\", moduleData.module2.molds.inUse);\nflow.set(\"precast_concrete_productionline1.module2_mold_assembly.molds.cleaning\", moduleData.module2.molds.cleaning);\nflow.set(\"precast_concrete_productionline1.module2_mold_assembly.molds.maintenance\", moduleData.module2.molds.maintenance);\nflow.set(\"precast_concrete_productionline1.module2_mold_assembly.assembly.position_accuracy\", moduleData.module2.assembly.position_accuracy);\nflow.set(\"precast_concrete_productionline1.module2_mold_assembly.assembly.lock_status\", moduleData.module2.assembly.lock_status);\nflow.set(\"precast_concrete_productionline1.module2_mold_assembly.assembly.cleaning_pressure\", moduleData.module2.assembly.cleaning_pressure);\n\n\n// 模块3：钢筋网片安装\nflow.set(\"precast_concrete_productionline1.module3_rebar_installation.rebar.inventory\", moduleData.module3.rebar.inventory);\nflow.set(\"precast_concrete_productionline1.module3_rebar_installation.rebar.specifications\", moduleData.module3.rebar.specifications);\nflow.set(\"precast_concrete_productionline1.module3_rebar_installation.rebar.position_x\", moduleData.module3.rebar.position_x);\nflow.set(\"precast_concrete_productionline1.module3_rebar_installation.rebar.position_y\", moduleData.module3.rebar.position_y);\nflow.set(\"precast_concrete_productionline1.module3_rebar_installation.rebar.installation_force\", moduleData.module3.rebar.installation_force);\nflow.set(\"precast_concrete_productionline1.module3_rebar_installation.mesh.inventory\", moduleData.module3.mesh.inventory);\nflow.set(\"precast_concrete_productionline1.module3_rebar_installation.mesh.specifications\", moduleData.module3.mesh.specifications);\nflow.set(\"precast_concrete_productionline1.module3_rebar_installation.mesh.coverage\", moduleData.module3.mesh.coverage);\n\n\n// 模块4：混凝土浇筑\nflow.set(\"precast_concrete_productionline1.module4_pouring.pouring.flow_rate\", moduleData.module4.pouring.flow_rate);\nflow.set(\"precast_concrete_productionline1.module4_pouring.pouring.pressure\", moduleData.module4.pouring.pressure);\nflow.set(\"precast_concrete_productionline1.module4_pouring.pouring.temperature\", moduleData.module4.pouring.temperature);\nflow.set(\"precast_concrete_productionline1.module4_pouring.pouring.height\", moduleData.module4.pouring.height);\nflow.set(\"precast_concrete_productionline1.module4_pouring.vibration.frequency\", moduleData.module4.vibration.frequency);\nflow.set(\"precast_concrete_productionline1.module4_pouring.vibration.amplitude\", moduleData.module4.vibration.amplitude);\nflow.set(\"precast_concrete_productionline1.module4_pouring.vibration.duration\", moduleData.module4.vibration.duration);\n\n\n// 模块5：养护\nflow.set(\"precast_concrete_productionline1.module5_curing.chamber1.temperature\", moduleData.module5.chamber1.temperature);\nflow.set(\"precast_concrete_productionline1.module5_curing.chamber1.humidity\", moduleData.module5.chamber1.humidity);\nflow.set(\"precast_concrete_productionline1.module5_curing.chamber1.pressure\", moduleData.module5.chamber1.pressure);\nflow.set(\"precast_concrete_productionline1.module5_curing.chamber1.time_remaining\", moduleData.module5.chamber1.time_remaining);\nflow.set(\"precast_concrete_productionline1.module5_curing.chamber2.temperature\", moduleData.module5.chamber2.temperature);\nflow.set(\"precast_concrete_productionline1.module5_curing.chamber2.humidity\", moduleData.module5.chamber2.humidity);\nflow.set(\"precast_concrete_productionline1.module5_curing.chamber2.pressure\", moduleData.module5.chamber2.pressure);\nflow.set(\"precast_concrete_productionline1.module5_curing.chamber2.time_remaining\", moduleData.module5.chamber2.time_remaining);\n\n\n// 模块6：脱模与起吊\nflow.set(\"precast_concrete_productionline1.module6_demolding.demolding.force\", moduleData.module6.demolding.force);\nflow.set(\"precast_concrete_productionline1.module6_demolding.demolding.success_rate\", moduleData.module6.demolding.success_rate);\nflow.set(\"precast_concrete_productionline1.module6_demolding.demolding.cycle_time\", moduleData.module6.demolding.cycle_time);\nflow.set(\"precast_concrete_productionline1.module6_demolding.crane.load\", moduleData.module6.crane.load);\nflow.set(\"precast_concrete_productionline1.module6_demolding.crane.height\", moduleData.module6.crane.height);\nflow.set(\"precast_concrete_productionline1.module6_demolding.crane.position\", moduleData.module6.crane.position);\nflow.set(\"precast_concrete_productionline1.module6_demolding.crane.status\", moduleData.module6.crane.status);\n\n\n// 模块7：成品质检\nflow.set(\"precast_concrete_productionline1.module7_quality_check.dimensions.length\", moduleData.module7.dimensions.length);\nflow.set(\"precast_concrete_productionline1.module7_quality_check.dimensions.width\", moduleData.module7.dimensions.width);\nflow.set(\"precast_concrete_productionline1.module7_quality_check.dimensions.height\", moduleData.module7.dimensions.height);\nflow.set(\"precast_concrete_productionline1.module7_quality_check.dimensions.tolerance\", moduleData.module7.dimensions.tolerance);\nflow.set(\"precast_concrete_productionline1.module7_quality_check.quality.surface_grade\", moduleData.module7.quality.surface_grade);\nflow.set(\"precast_concrete_productionline1.module7_quality_check.quality.strength_grade\", moduleData.module7.quality.strength_grade);\nflow.set(\"precast_concrete_productionline1.module7_quality_check.quality.pass_rate\", moduleData.module7.quality.pass_rate);\nflow.set(\"precast_concrete_productionline1.module7_quality_check.quality.defect_count\", moduleData.module7.quality.defect_count);\n\n\n// 模块8：入库管理\nflow.set(\"precast_concrete_productionline1.module8_inventory_management.inventory.total_products\", moduleData.module8.inventory.total_products);\nflow.set(\"precast_concrete_productionline1.module8_inventory_management.inventory.today_in\", moduleData.module8.inventory.today_in);\nflow.set(\"precast_concrete_productionline1.module8_inventory_management.inventory.today_out\", moduleData.module8.inventory.today_out);\nflow.set(\"precast_concrete_productionline1.module8_inventory_management.inventory.available_space\", moduleData.module8.inventory.available_space);\nflow.set(\"precast_concrete_productionline1.module8_inventory_management.logistics.pending_orders\", moduleData.module8.logistics.pending_orders);\nflow.set(\"precast_concrete_productionline1.module8_inventory_management.logistics.shipping_today\", moduleData.module8.logistics.shipping_today);\nflow.set(\"precast_concrete_productionline1.module8_inventory_management.logistics.location_A\", moduleData.module8.logistics.location_A);\nflow.set(\"precast_concrete_productionline1.module8_inventory_management.logistics.location_B\", moduleData.module8.logistics.location_B);\nflow.set(\"precast_concrete_productionline1.module8_inventory_management.logistics.location_C\", moduleData.module8.logistics.location_C);\n\n\n\n// 发送各模块数据\nreturn [\n    {payload: moduleData.module1, topic: \"module1_data\"},\n    {payload: moduleData.module2, topic: \"module2_data\"},\n    {payload: moduleData.module3, topic: \"module3_data\"},\n    {payload: moduleData.module4, topic: \"module4_data\"},\n    {payload: moduleData.module5, topic: \"module5_data\"},\n    {payload: moduleData.module6, topic: \"module6_data\"},\n    {payload: moduleData.module7, topic: \"module7_data\"},\n    {payload: moduleData.module8, topic: \"module8_data\"}\n];",
        "outputs": 8,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 860,
        "wires": [
            [
                "module1_ui",
                "m1_equipment_ui",
                "m1_quality_ui",
                "b82288bf6a61ca7b"
            ],
            [
                "module2_ui",
                "m2_assembly_ui",
                "6f26d0cbcb44a082"
            ],
            [
                "module3_ui",
                "m3_mesh_ui",
                "911ddbd63d13f0c5"
            ],
            [
                "module4_ui",
                "m4_vibrate_ui",
                "39d05d6f8e044731"
            ],
            [
                "module5_ui",
                "m5_chamber2_ui",
                "7aa351559763a426"
            ],
            [
                "module6_ui",
                "m6_crane_ui",
                "ed033cfc3e231201"
            ],
            [
                "module7_ui",
                "m7_quality_ui",
                "de08985d68c26b14"
            ],
            [
                "module8_ui",
                "m8_logistics_ui",
                "7c796173bfe9f219"
            ]
        ]
    },
    {
        "id": "module1_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m1_group1",
        "name": "原料状态",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<h4>原材余量</h4><ul><li>水泥：{{msg.payload.materials.cement | number:1}} %</li><li>砂：{{msg.payload.materials.sand | number:1}} %</li><li>碎石：{{msg.payload.materials.gravel | number:1}} %</li><li>水：{{msg.payload.materials.water | number:1}} %</li><li>外加剂：{{msg.payload.materials.additive | number:1}} %</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "m1_equipment_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m1_group2",
        "name": "搅拌设备",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<h4>搅拌机状态</h4><ul><li>转速：{{msg.payload.mixer.speed | number:1}} rpm</li><li>功率：{{msg.payload.mixer.power | number:1}} kW</li><li>温度：{{msg.payload.mixer.temperature | number:1}} ℃</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1140,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "m1_quality_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m1_group3",
        "name": "质量参数",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<h4>当前质量指标</h4><ul><li>塌落度：{{msg.payload.quality.slump | number:1}} mm</li><li>抗压强度：{{msg.payload.quality.strength | number:1}} MPa</li><li>密实度：{{msg.payload.quality.density | number:1}} kg/m³</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 820,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "module2_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m2_group1",
        "name": "模具信息",
        "order": 1,
        "width": "6",
        "height": "5",
        "format": "<h4>模具使用情况</h4><ul><li>可用：{{msg.payload.molds.available}} 套</li><li>使用中：{{msg.payload.molds.inUse}} 套</li><li>清洁中：{{msg.payload.molds.cleaning}} 套</li><li>维护：{{msg.payload.molds.maintenance}} 套</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "m2_assembly_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m2_group2",
        "name": "组装状态",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<h4>组装参数</h4><ul><li>定位精度：{{msg.payload.assembly.position_accuracy | number:2}} %</li><li>锁紧状态：{{msg.payload.assembly.lock_status}}</li><li>清洗压力：{{msg.payload.assembly.cleaning_pressure | number:1}} bar</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1080,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "module3_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m3_group1",
        "name": "钢筋安装",
        "order": 1,
        "width": "6",
        "height": "5",
        "format": "<h4>钢筋参数</h4><ul><li>库存：{{msg.payload.rebar.inventory}} 根</li><li>规格：{{msg.payload.rebar.specifications}}</li><li>安装位置：X={{msg.payload.rebar.position_x | number:1}} Y={{msg.payload.rebar.position_y | number:1}}</li><li>安装力：{{msg.payload.rebar.installation_force | number:0}} N</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "m3_mesh_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m3_group2",
        "name": "网片参数",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<h4>网片参数</h4><ul><li>库存：{{msg.payload.mesh.inventory}} 张</li><li>规格：{{msg.payload.mesh.specifications}}</li><li>铺设覆盖率：{{msg.payload.mesh.coverage | number:1}} %</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1080,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "module4_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m4_group1",
        "name": "浇筑过程",
        "order": 1,
        "width": "6",
        "height": "5",
        "format": "<h4>浇筑参数</h4><ul><li>流量：{{msg.payload.pouring.flow_rate | number:1}} m³/h</li><li>压力：{{msg.payload.pouring.pressure | number:2}} MPa</li><li>温度：{{msg.payload.pouring.temperature | number:1}} ℃</li><li>高度：{{msg.payload.pouring.height | number:0}} mm</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "m4_vibrate_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m4_group2",
        "name": "振捣参数",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<h4>振捣过程</h4><ul><li>频率：{{msg.payload.vibration.frequency | number:1}} Hz</li><li>振幅：{{msg.payload.vibration.amplitude | number:2}} mm</li><li>持续时间：{{msg.payload.vibration.duration | number:0}} s</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1080,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "module5_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m5_group1",
        "name": "养护仓1",
        "order": 1,
        "width": "6",
        "height": "5",
        "format": "<h4>养护仓1参数</h4><ul><li>温度：{{msg.payload.chamber1.temperature | number:1}} ℃</li><li>湿度：{{msg.payload.chamber1.humidity | number:1}} %</li><li>压力：{{msg.payload.chamber1.pressure | number:2}} bar</li><li>剩余时间：{{msg.payload.chamber1.time_remaining | number:0}} min</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 900,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "m5_chamber2_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m5_group2",
        "name": "养护仓2",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<h4>养护仓2参数</h4><ul><li>温度：{{msg.payload.chamber2.temperature | number:1}} ℃</li><li>湿度：{{msg.payload.chamber2.humidity | number:1}} %</li><li>压力：{{msg.payload.chamber2.pressure | number:2}} bar</li><li>剩余时间：{{msg.payload.chamber2.time_remaining | number:0}} min</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1080,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "module6_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m6_group1",
        "name": "脱模参数",
        "order": 1,
        "width": "6",
        "height": "5",
        "format": "<h4>脱模工序</h4><ul><li>脱模力：{{msg.payload.demolding.force | number:0}} N</li><li>成功率：{{msg.payload.demolding.success_rate | number:2}} %</li><li>周期时长：{{msg.payload.demolding.cycle_time | number:0}} s</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1080,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "m6_crane_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m6_group2",
        "name": "起吊参数",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<h4>起吊工序</h4><ul><li>当前负载：{{msg.payload.crane.load | number:1}} t</li><li>升降高度：{{msg.payload.crane.height | number:2}} m</li><li>位置：{{msg.payload.crane.position}}</li><li>状态：{{msg.payload.crane.status}}</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 900,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "module7_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m7_group1",
        "name": "尺寸参数",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<h4>成品尺寸</h4><ul><li>长度：{{msg.payload.dimensions.length | number:1}} mm</li><li>宽度：{{msg.payload.dimensions.width | number:1}} mm</li><li>高度：{{msg.payload.dimensions.height | number:1}} mm</li><li>尺寸公差：{{msg.payload.dimensions.tolerance}}</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1080,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "m7_quality_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m7_group2",
        "name": "质量指标",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<h4>质量检测</h4><ul><li>表面等级：{{msg.payload.quality.surface_grade}}</li><li>强度等级：{{msg.payload.quality.strength_grade}}</li><li>合格率：{{msg.payload.quality.pass_rate | number:2}} %</li><li>缺陷数：{{msg.payload.quality.defect_count}}</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 900,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "module8_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m8_group1",
        "name": "库存信息",
        "order": 1,
        "width": "6",
        "height": "5",
        "format": "<h4>仓库库存</h4><ul><li>总库存：{{msg.payload.inventory.total_products}} 件</li><li>今日入库：{{msg.payload.inventory.today_in}} 件</li><li>今日出库：{{msg.payload.inventory.today_out}} 件</li><li>可用面积：{{msg.payload.inventory.available_space | number:1}} %</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 900,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "m8_logistics_ui",
        "type": "ui_template",
        "z": "main_flow_tab",
        "group": "m8_group2",
        "name": "物流信息",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<h4>物流与库区</h4><ul><li>待发货订单：{{msg.payload.logistics.pending_orders}}</li><li>今日发货：{{msg.payload.logistics.shipping_today}}</li><li>库区A存量：{{msg.payload.logistics.location_A}}</li><li>库区B存量：{{msg.payload.logistics.location_B}}</li><li>库区C存量：{{msg.payload.logistics.location_C}}</li></ul>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1080,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "b5e77968ad47801a",
        "type": "ui_template",
        "z": "main_flow_tab",
        "d": true,
        "group": "overview_group1",
        "name": "生产线状态显示",
        "order": 1,
        "width": "12",
        "height": "8",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1800,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "42dff8e64a5b31d1",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_stats",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "日产量目标",
        "label": "日产量目标",
        "format": "{{msg.payload.dailyTarget}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 810,
        "y": 200,
        "wires": []
    },
    {
        "id": "8bd7d6c4dc0d4897",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_stats",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "已完成产量",
        "label": "已完成产量",
        "format": "{{msg.payload.dailyCompleted}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 810,
        "y": 120,
        "wires": []
    },
    {
        "id": "cebf59e2a154bd17",
        "type": "ui_gauge",
        "z": "main_flow_tab",
        "name": "完成率仪表盘",
        "group": "group_stats",
        "order": 3,
        "width": 6,
        "height": 6,
        "gtype": "wave",
        "title": "完成率(%)",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#ff0000",
            "#e6ff00",
            "#00ff19"
        ],
        "seg1": "50",
        "seg2": "80",
        "diff": false,
        "className": "",
        "x": 1020,
        "y": 60,
        "wires": []
    },
    {
        "id": "dd9c89f17ddc2f90",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_stats",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "告警数量",
        "label": "告警数量",
        "format": "{{msg.payload.alarmCount}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1100,
        "y": 180,
        "wires": []
    },
    {
        "id": "f5d8ad844640e02a",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_modules",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "模块1",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1150,
        "y": 460,
        "wires": []
    },
    {
        "id": "15cb331111c56fec",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_modules",
        "order": 2,
        "width": 12,
        "height": 1,
        "name": "模块2",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1150,
        "y": 580,
        "wires": []
    },
    {
        "id": "a8c9437fc755a4f6",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_modules",
        "order": 3,
        "width": 12,
        "height": 1,
        "name": "模块3",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1150,
        "y": 700,
        "wires": []
    },
    {
        "id": "2ff73753b3853b8e",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_modules",
        "order": 4,
        "width": 12,
        "height": 1,
        "name": "模块4",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1150,
        "y": 820,
        "wires": []
    },
    {
        "id": "d2925983fe8f6e22",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_modules",
        "order": 5,
        "width": 12,
        "height": 1,
        "name": "模块5",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1150,
        "y": 940,
        "wires": []
    },
    {
        "id": "eb4f33211ed95194",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_modules",
        "order": 6,
        "width": 12,
        "height": 1,
        "name": "模块6",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1150,
        "y": 1060,
        "wires": []
    },
    {
        "id": "5b1119906063b61d",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_modules",
        "order": 7,
        "width": 12,
        "height": 1,
        "name": "模块7",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1170,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3884b4df3d57760f",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_modules",
        "order": 8,
        "width": 12,
        "height": 1,
        "name": "模块8",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1170,
        "y": 1280,
        "wires": []
    },
    {
        "id": "83bb199f49935fac",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_alarms",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "告警1",
        "label": "",
        "format": "{{msg.payload[0] || ''}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1090,
        "y": 220,
        "wires": []
    },
    {
        "id": "64427adfc6a7cfca",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_alarms",
        "order": 2,
        "width": 12,
        "height": 1,
        "name": "告警2",
        "label": "",
        "format": "{{msg.payload[1] || ''}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1090,
        "y": 260,
        "wires": []
    },
    {
        "id": "438171a7dbb989fe",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_alarms",
        "order": 3,
        "width": 12,
        "height": 1,
        "name": "告警3",
        "label": "",
        "format": "{{msg.payload[2] || ''}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1090,
        "y": 300,
        "wires": []
    },
    {
        "id": "f4791849e38e1a8b",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_alarms",
        "order": 4,
        "width": 12,
        "height": 1,
        "name": "告警4",
        "label": "",
        "format": "{{msg.payload[3] || ''}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1090,
        "y": 340,
        "wires": []
    },
    {
        "id": "ad624104bcfc386b",
        "type": "ui_text",
        "z": "main_flow_tab",
        "group": "group_alarms",
        "order": 5,
        "width": 12,
        "height": 1,
        "name": "告警5",
        "label": "",
        "format": "{{msg.payload[4] || ''}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1090,
        "y": 380,
        "wires": []
    },
    {
        "id": "20051ddd9e72c26e",
        "type": "function",
        "z": "main_flow_tab",
        "name": "获取当日完成率",
        "func": "\n\n\nmsg.payload = \nMath.round((msg.payload.dailyCompleted / msg.payload.dailyTarget) * 100);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 60,
        "wires": [
            [
                "cebf59e2a154bd17"
            ]
        ]
    },
    {
        "id": "b82288bf6a61ca7b",
        "type": "function",
        "z": "main_flow_tab",
        "name": "function 1",
        "func": "let mat = msg.payload.materials;\nmsg.payload =\n    `混凝土预备: ${mat.cement.toFixed(2)}kg，外加剂: ${mat.additive.toFixed(2)}kg`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 460,
        "wires": [
            [
                "f5d8ad844640e02a"
            ]
        ]
    },
    {
        "id": "6f26d0cbcb44a082",
        "type": "function",
        "z": "main_flow_tab",
        "name": "function 2",
        "func": "let molds = msg.payload.molds;\nlet ass = msg.payload.assembly;\nmsg.payload =\n    `模具组装:\\n` +\n    `模具-可用: ${molds.available}，在用: ${molds.inUse}，清洗: ${molds.cleaning}，维护: ${molds.maintenance}\\n`\n    ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 580,
        "wires": [
            [
                "15cb331111c56fec"
            ]
        ]
    },
    {
        "id": "911ddbd63d13f0c5",
        "type": "function",
        "z": "main_flow_tab",
        "name": "function 3",
        "func": "/*\nlet rebar = msg.payload.rebar;\nlet mesh = msg.payload.mesh;\nmsg.payload =\n    `钢筋网片安装:\\n` +\n    `钢筋-库存: ${ rebar.inventory }，网片-库存: ${ mesh.inventory } \\n`\n    ;\nreturn msg;\n*/\n\n\nlet rebar = msg.payload.rebar;\nlet mesh = msg.payload.mesh;\nmsg.payload =\n    `<span style=\"color:red;\">钢筋网片安装</span>:\\n` +\n    `钢筋-库存: ${rebar.inventory}，网片-库存: ${mesh.inventory}\\n`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 700,
        "wires": [
            [
                "a8c9437fc755a4f6"
            ]
        ],
        "info": "<div style=\"white-space:pre-line;\">{{{msg.payload}}}</div>"
    },
    {
        "id": "39d05d6f8e044731",
        "type": "function",
        "z": "main_flow_tab",
        "name": "function 4",
        "func": "let pour = msg.payload.pouring;\nlet vib = msg.payload.vibration;\nmsg.payload =\n    `混凝土浇筑:\\n` +\n    `流量: ${pour.flow_rate.toFixed(2)}m³/h，压力: ${pour.pressure.toFixed(2)}MPa，温度: ${pour.temperature.toFixed(2)}℃`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 820,
        "wires": [
            [
                "2ff73753b3853b8e"
            ]
        ]
    },
    {
        "id": "7aa351559763a426",
        "type": "function",
        "z": "main_flow_tab",
        "name": "function 5",
        "func": "let c1 = msg.payload.chamber1;\nlet c2 = msg.payload.chamber2;\nmsg.payload =\n    `养护: \\n` +\n    `1号室-温度: ${c1.temperature.toFixed(2)}℃， 压力: ${c1.pressure.toFixed(2)}MPa \\n` +\n    `2号室-温度: ${c2.temperature.toFixed(2)}℃， 压力: ${c2.pressure.toFixed(2)}MPa`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 940,
        "wires": [
            [
                "d2925983fe8f6e22"
            ]
        ]
    },
    {
        "id": "ed033cfc3e231201",
        "type": "function",
        "z": "main_flow_tab",
        "name": "function 6",
        "func": "let dem = msg.payload.demolding;\nlet crane = msg.payload.crane;\nmsg.payload =\n    `脱模与起吊:` +\n    `状态: ${crane.status}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1060,
        "wires": [
            [
                "eb4f33211ed95194"
            ]
        ]
    },
    {
        "id": "de08985d68c26b14",
        "type": "function",
        "z": "main_flow_tab",
        "name": "function 7",
        "func": "let dim = msg.payload.dimensions;\nlet qual = msg.payload.quality;\nmsg.payload =\n    `成品质检:\\n` +\n    `质量-表面: ${qual.surface_grade}，合格率: ${qual.pass_rate.toFixed(2)}%，缺陷数: ${qual.defect_count}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1180,
        "wires": [
            [
                "5b1119906063b61d"
            ]
        ]
    },
    {
        "id": "7c796173bfe9f219",
        "type": "function",
        "z": "main_flow_tab",
        "name": "function 8",
        "func": "let inv = msg.payload.inventory;\nlet log = msg.payload.logistics;\nmsg.payload =\n    `仓库管理:\\n` +\n    `总数: ${inv.total_products}，今日入库: ${inv.today_in}，今日出库: ${inv.today_out}，空余位: ${inv.available_space.toFixed(2)}\\n` +\n    `物流-待发: ${log.pending_orders}，今日发货: ${log.shipping_today}，A区: ${log.location_A}，B区: ${log.location_B}，C区: ${log.location_C}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1280,
        "wires": [
            [
                "3884b4df3d57760f"
            ]
        ]
    },
    {
        "id": "1b0045b713437721",
        "type": "opcua-compact-server",
        "z": "main_flow_tab",
        "port": "4842",
        "endpoint": "",
        "productUri": "",
        "acceptExternalCommands": true,
        "maxAllowedSessionNumber": "10",
        "maxConnectionsPerEndpoint": "10",
        "maxAllowedSubscriptionNumber": "100",
        "alternateHostname": "",
        "name": "OPCUA_Server_Precast_Concrete_Production_Line1_FieldLevel",
        "showStatusActivities": true,
        "showErrors": true,
        "allowAnonymous": true,
        "individualCerts": false,
        "isAuditing": false,
        "serverDiscovery": true,
        "users": [],
        "xmlsetsOPCUA": [],
        "publicCertificateFile": "",
        "privateCertificateFile": "",
        "registerServerMethod": "1",
        "discoveryServerEndpointUrl": "opc.tcp://127.0.0.1:4842",
        "capabilitiesForMDNS": "",
        "maxNodesPerRead": 1000,
        "maxNodesPerWrite": 1000,
        "maxNodesPerHistoryReadData": 100,
        "maxNodesPerBrowse": 3000,
        "maxBrowseContinuationPoints": "10",
        "maxHistoryContinuationPoints": "10",
        "delayToInit": "1000",
        "delayToClose": "200",
        "serverShutdownTimeout": "100",
        "addressSpaceScript": "function constructAlarmAddressSpace(server, addressSpace, eventObjects, done) {\n  // server = the created node-opcua server\n  // addressSpace = address space of the node-opcua server\n  // eventObjects = add event variables here to hold them in memory from this script\n\n  // internal sandbox objects are:\n  // node = the compact server node,\n  // coreServer = core compact server object for debug and access to NodeOPCUA\n  // this.sandboxNodeContext = node context node-red\n  // this.sandboxFlowContext = flow context node-red\n  // this.sandboxGlobalContext = global context node-red\n  // this.sandboxEnv = env variables\n  // timeout and interval functions as expected from nodejs\n\n  const opcua = coreServer.choreCompact.opcua;\n  const LocalizedText = opcua.LocalizedText;\n  const namespace = addressSpace.getOwnNamespace();\n\n  const Variant = opcua.Variant;\n  const DataType = opcua.DataType;\n  const DataValue = opcua.DataValue;\n\n  var flexServerInternals = this;\n\n  coreServer.debugLog(\"init dynamic address space\");\n  const rootFolder = addressSpace.findNode(\"RootFolder\");\n\n  node.warn(\"construct new address space for OPC UA\");\n\n\n  // 一级：生产线对象\n  const prodLine = namespace.addObject({\n    organizedBy: rootFolder.objects,\n    browseName: \"precast_concrete_productionline1\"\n  });\n\n  // 生产线运行状态变量（全局）\n  namespace.addVariable({\n    componentOf: prodLine,\n    browseName: \"line_status\",\n    nodeId: \"ns=1;s=precast_concrete_productionline1.line_status\",\n    dataType: \"Int32\",\n    value: {\n      get: () => new Variant({\n        dataType: DataType.Int32,\n        value: flexServerInternals.sandboxFlowContext.get(\"precast_concrete_productionline1.line_status\") || 0\n      }),\n      set: (variant) => {\n        flexServerInternals.sandboxFlowContext.set(\"precast_concrete_productionline1.line_status\", variant.value);\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n\n  // 二级：Module1混凝土制备对象\n  const module1 = namespace.addObject({\n    organizedBy: prodLine,\n    browseName: \"module1_concrete_preparation\"\n  });\n\n  // 模块运行状态变量（int,读写）\n  namespace.addVariable({\n    componentOf: module1,\n    browseName: \"module_status\",\n    nodeId: \"ns=1;s=precast.module1_concrete_preparation.module_status\",\n    dataType: \"Int32\",\n    value: {\n      get: () => new Variant({\n        dataType: DataType.Int32,\n        value: flexServerInternals.sandboxFlowContext.get(\"precast_concrete_productionline1.module1_concrete_preparation.module_status\") || 0\n      }),\n      set: (variant) => {\n        flexServerInternals.sandboxFlowContext.set(\"precast_concrete_productionline1.module1_concrete_preparation.module_status\", variant.value);\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n\n  // 三级对象（materials, mixer, quality）\n  const materialsObj = namespace.addObject({\n    organizedBy: module1,\n    browseName: \"materials\"\n  });\n\n  const mixerObj = namespace.addObject({\n    organizedBy: module1,\n    browseName: \"mixer\"\n  });\n\n  const qualityObj = namespace.addObject({\n    organizedBy: module1,\n    browseName: \"quality\"\n  });\n\n  // 四级：materials 变量\n  [\n    { name: \"cement\", path: \"materials.cement\" },\n    { name: \"sand\", path: \"materials.sand\" },\n    { name: \"gravel\", path: \"materials.gravel\" },\n    { name: \"water\", path: \"materials.water\" },\n    { name: \"additive\", path: \"materials.additive\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: materialsObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module1.materials.${v.name}`,\n      dataType: \"Double\",\n      value: {\n        get: () => new Variant({\n          dataType: DataType.Double,\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module1_concrete_preparation.${v.path}`) || 0\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(\n            `precast_concrete_productionline1.module1_concrete_preparation.${v.path}`,\n            variant.value\n          );\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n\n  // mixer变量\n  [\n    { name: \"speed\", path: \"mixer.speed\" },\n    { name: \"power\", path: \"mixer.power\" },\n    { name: \"temperature\", path: \"mixer.temperature\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: mixerObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module1.mixer.${v.name}`,\n      dataType: \"Double\",\n      value: {\n        get: () => new Variant({\n          dataType: DataType.Double,\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module1_concrete_preparation.${v.path}`) || 0\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(\n            `precast_concrete_productionline1.module1_concrete_preparation.${v.path}`,\n            variant.value\n          );\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n\n  // quality变量\n  [\n    { name: \"slump\", path: \"quality.slump\" },\n    { name: \"strength\", path: \"quality.strength\" },\n    { name: \"density\", path: \"quality.density\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: qualityObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module1.quality.${v.name}`,\n      dataType: \"Double\",\n      value: {\n        get: () => new Variant({\n          dataType: DataType.Double,\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module1_concrete_preparation.${v.path}`) || 0\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(\n            `precast_concrete_productionline1.module1_concrete_preparation.${v.path}`,\n            variant.value\n          );\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n\n\n// 模块2\n  const module2 = namespace.addObject({ organizedBy: prodLine, browseName: \"module2_mold_assembly\" });\n  namespace.addVariable({\n    componentOf: module2,\n    browseName: \"module_status\",\n    nodeId: \"ns=1;s=precast_concrete_productionline1.module2_mold_assembly.module_status\",\n    dataType: \"Int32\",\n    value: {\n      get: () => new Variant({\n        dataType: DataType.Int32,\n        value: flexServerInternals.sandboxFlowContext.get(\"precast_concrete_productionline1.module2_mold_assembly.module_status\") || 0\n      }),\n      set: (variant) => {\n        flexServerInternals.sandboxFlowContext.set(\"precast_concrete_productionline1.module2_mold_assembly.module_status\", variant.value);\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n  const moldsObj = namespace.addObject({ organizedBy: module2, browseName: \"molds\" });\n  [\n    { name: \"available\", path: \"molds.available\", dataType: \"Int32\" },\n    { name: \"inUse\", path: \"molds.inUse\", dataType: \"Int32\" },\n    { name: \"cleaning\", path: \"molds.cleaning\", dataType: \"Int32\" },\n    { name: \"maintenance\", path: \"molds.maintenance\", dataType: \"Int32\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: moldsObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module2.molds.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module2_mold_assembly.${v.path}`) || 0\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module2_mold_assembly.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n  const assemblyObj = namespace.addObject({ organizedBy: module2, browseName: \"assembly\" });\n  [\n    { name: \"position_accuracy\", path: \"assembly.position_accuracy\", dataType: \"Double\" },\n    // 对字符串锁紧状态处理，这里映射为Boolean，您可自行调整\n    {\n      name: \"lock_status\", path: \"assembly.lock_status\", dataType: \"Boolean\",\n      value: {\n        get: () => {\n          const strVal = flexServerInternals.sandboxFlowContext.get(\"precast_concrete_productionline1.module2_mold_assembly.assembly.lock_status\");\n          return new Variant({ dataType: DataType.Boolean, value: strVal === \"已锁紧\" });\n        },\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(\"precast_concrete_productionline1.module2_mold_assembly.assembly.lock_status\", variant.value ? \"已锁紧\" : \"待锁紧\");\n          return opcua.StatusCodes.Good;\n        }\n      }\n    },\n    { name: \"cleaning_pressure\", path: \"assembly.cleaning_pressure\", dataType: \"Double\" }\n  ].forEach(v => {\n    const nodeObj = {\n      componentOf: assemblyObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module2.assembly.${v.name}`,\n      dataType: v.dataType,\n    };\n    if (v.name === \"lock_status\") {\n      nodeObj.value = v.value;\n    } else {\n      nodeObj.value = {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module2_mold_assembly.${v.path}`) || 0\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module2_mold_assembly.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      };\n    }\n    namespace.addVariable(nodeObj);\n  });\n\n  // 模块3：钢筋网片安装\n  const module3 = namespace.addObject({\n    organizedBy: prodLine,\n    browseName: \"module3_rebar_installation\"\n  });\n  namespace.addVariable({\n    componentOf: module3,\n    browseName: \"module_status\",\n    nodeId: \"ns=1;s=precast_concrete_productionline1.module3_rebar_installation.module_status\",\n    dataType: \"Int32\",\n    value: {\n      get: () => new Variant({\n        dataType: DataType.Int32,\n        value: flexServerInternals.sandboxFlowContext.get(\"precast_concrete_productionline1.module3_rebar_installation.module_status\") || 0\n      }),\n      set: (variant) => {\n        flexServerInternals.sandboxFlowContext.set(\"precast_concrete_productionline1.module3_rebar_installation.module_status\", variant.value);\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n  const rebarObj = namespace.addObject({ organizedBy: module3, browseName: \"rebar\" });\n  [\n    { name: \"inventory\", path: \"rebar.inventory\", dataType: \"Int32\" },\n    { name: \"specifications\", path: \"rebar.specifications\", dataType: \"String\" },\n    { name: \"position_x\", path: \"rebar.position_x\", dataType: \"Double\" },\n    { name: \"position_y\", path: \"rebar.position_y\", dataType: \"Double\" },\n    { name: \"installation_force\", path: \"rebar.installation_force\", dataType: \"Int32\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: rebarObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module3.rebar.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module3_rebar_installation.${v.path}`) || (v.dataType === \"String\" ? \"\" : 0)\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module3_rebar_installation.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n\n  const meshObj = namespace.addObject({ organizedBy: module3, browseName: \"mesh\" });\n  [\n    { name: \"inventory\", path: \"mesh.inventory\", dataType: \"Int32\" },\n    { name: \"specifications\", path: \"mesh.specifications\", dataType: \"String\" },\n    { name: \"coverage\", path: \"mesh.coverage\", dataType: \"Double\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: meshObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module3.mesh.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module3_rebar_installation.${v.path}`) || (v.dataType === \"String\" ? \"\" : 0)\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module3_rebar_installation.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n\n\n  // 模块4：混凝土浇筑\n  const module4 = namespace.addObject({\n    organizedBy: prodLine,\n    browseName: \"module4_pouring\"\n  });\n  namespace.addVariable({\n    componentOf: module4,\n    browseName: \"module_status\",\n    nodeId: \"ns=1;s=precast_concrete_productionline1.module4_pouring.module_status\",\n    dataType: \"Int32\",\n    value: {\n      get: () => new Variant({\n        dataType: DataType.Int32,\n        value: flexServerInternals.sandboxFlowContext.get(\"precast_concrete_productionline1.module4_pouring.module_status\") || 0\n      }),\n      set: (variant) => {\n        flexServerInternals.sandboxFlowContext.set(\"precast_concrete_productionline1.module4_pouring.module_status\", variant.value);\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n  const pouringObj = namespace.addObject({ organizedBy: module4, browseName: \"pouring\" });\n  [\n    { name: \"flow_rate\", path: \"pouring.flow_rate\", dataType: \"Double\" },\n    { name: \"pressure\", path: \"pouring.pressure\", dataType: \"Double\" },\n    { name: \"temperature\", path: \"pouring.temperature\", dataType: \"Double\" },\n    { name: \"height\", path: \"pouring.height\", dataType: \"Int32\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: pouringObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module4.pouring.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module4_pouring.${v.path}`) || 0\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module4_pouring.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n  const vibrationObj = namespace.addObject({ organizedBy: module4, browseName: \"vibration\" });\n  [\n    { name: \"frequency\", path: \"vibration.frequency\", dataType: \"Double\" },\n    { name: \"amplitude\", path: \"vibration.amplitude\", dataType: \"Double\" },\n    { name: \"duration\", path: \"vibration.duration\", dataType: \"Int32\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: vibrationObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module4.vibration.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module4_pouring.${v.path}`) || 0\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module4_pouring.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n\n\n  // 模块5：养护\n  const module5 = namespace.addObject({\n    organizedBy: prodLine,\n    browseName: \"module5_curing\"\n  });\n  namespace.addVariable({\n    componentOf: module5,\n    browseName: \"module_status\",\n    nodeId: \"ns=1;s=precast_concrete_productionline1.module5_curing.module_status\",\n    dataType: \"Int32\",\n    value: {\n      get: () => new Variant({\n        dataType: DataType.Int32,\n        value: flexServerInternals.sandboxFlowContext.get(\"precast_concrete_productionline1.module5_curing.module_status\") || 0\n      }),\n      set: (variant) => {\n        flexServerInternals.sandboxFlowContext.set(\"precast_concrete_productionline1.module5_curing.module_status\", variant.value);\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n  const chamber1Obj = namespace.addObject({ organizedBy: module5, browseName: \"chamber1\" });\n  [\n    { name: \"temperature\", path: \"chamber1.temperature\", dataType: \"Double\" },\n    { name: \"humidity\", path: \"chamber1.humidity\", dataType: \"Double\" },\n    { name: \"pressure\", path: \"chamber1.pressure\", dataType: \"Double\" },\n    { name: \"time_remaining\", path: \"chamber1.time_remaining\", dataType: \"Int32\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: chamber1Obj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module5.chamber1.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module5_curing.${v.path}`) || 0\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module5_curing.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n  const chamber2Obj = namespace.addObject({ organizedBy: module5, browseName: \"chamber2\" });\n  [\n    { name: \"temperature\", path: \"chamber2.temperature\", dataType: \"Double\" },\n    { name: \"humidity\", path: \"chamber2.humidity\", dataType: \"Double\" },\n    { name: \"pressure\", path: \"chamber2.pressure\", dataType: \"Double\" },\n    { name: \"time_remaining\", path: \"chamber2.time_remaining\", dataType: \"Int32\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: chamber2Obj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module5.chamber2.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module5_curing.${v.path}`) || 0\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module5_curing.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n\n\n  // 模块6：脱模与起吊\n  const module6 = namespace.addObject({\n    organizedBy: prodLine,\n    browseName: \"module6_demolding\"\n  });\n  namespace.addVariable({\n    componentOf: module6,\n    browseName: \"module_status\",\n    nodeId: \"ns=1;s=precast_concrete_productionline1.module6_demolding.module_status\",\n    dataType: \"Int32\",\n    value: {\n      get: () => new Variant({\n        dataType: DataType.Int32,\n        value: flexServerInternals.sandboxFlowContext.get(\"precast_concrete_productionline1.module6_demolding.module_status\") || 0\n      }),\n      set: (variant) => {\n        flexServerInternals.sandboxFlowContext.set(\"precast_concrete_productionline1.module6_demolding.module_status\", variant.value);\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n  const demoldingObj = namespace.addObject({ organizedBy: module6, browseName: \"demolding\" });\n  [\n    { name: \"force\", path: \"demolding.force\", dataType: \"Int32\" },\n    { name: \"success_rate\", path: \"demolding.success_rate\", dataType: \"Double\" },\n    { name: \"cycle_time\", path: \"demolding.cycle_time\", dataType: \"Int32\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: demoldingObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module6.demolding.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module6_demolding.${v.path}`) || 0\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module6_demolding.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n  const craneObj = namespace.addObject({ organizedBy: module6, browseName: \"crane\" });\n  [\n    { name: \"load\", path: \"crane.load\", dataType: \"Double\" },\n    { name: \"height\", path: \"crane.height\", dataType: \"Double\" },\n    { name: \"position\", path: \"crane.position\", dataType: \"String\" },\n    { name: \"status\", path: \"crane.status\", dataType: \"String\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: craneObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module6.crane.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module6_demolding.${v.path}`) || (v.dataType === \"String\" ? \"\" : 0)\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module6_demolding.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n\n\n  // 模块7：成品质检\n  const module7 = namespace.addObject({\n    organizedBy: prodLine,\n    browseName: \"module7_quality_check\"\n  });\n  namespace.addVariable({\n    componentOf: module7,\n    browseName: \"module_status\",\n    nodeId: \"ns=1;s=precast_concrete_productionline1.module7_quality_check.module_status\",\n    dataType: \"Int32\",\n    value: {\n      get: () => new Variant({\n        dataType: DataType.Int32,\n        value: flexServerInternals.sandboxFlowContext.get(\"precast_concrete_productionline1.module7_quality_check.module_status\") || 0\n      }),\n      set: (variant) => {\n        flexServerInternals.sandboxFlowContext.set(\"precast_concrete_productionline1.module7_quality_check.module_status\", variant.value);\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n  const dimensionsObj = namespace.addObject({ organizedBy: module7, browseName: \"dimensions\" });\n  [\n    { name: \"length\", path: \"dimensions.length\", dataType: \"Double\" },\n    { name: \"width\", path: \"dimensions.width\", dataType: \"Double\" },\n    { name: \"height\", path: \"dimensions.height\", dataType: \"Double\" },\n    { name: \"tolerance\", path: \"dimensions.tolerance\", dataType: \"String\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: dimensionsObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module7.dimensions.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module7_quality_check.${v.path}`) || (v.dataType === \"String\" ? \"\" : 0)\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module7_quality_check.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n  const productqualityObj = namespace.addObject({ organizedBy: module7, browseName: \"productquality\" });\n  [\n    { name: \"surface_grade\", path: \"quality.surface_grade\", dataType: \"String\" },\n    { name: \"strength_grade\", path: \"quality.strength_grade\", dataType: \"String\" },\n    { name: \"pass_rate\", path: \"quality.pass_rate\", dataType: \"Double\" },\n    { name: \"defect_count\", path: \"quality.defect_count\", dataType: \"Int32\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: productqualityObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module7.quality.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module7_quality_check.${v.path}`) || (v.dataType === \"String\" ? \"\" : 0)\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module7_quality_check.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n\n\n  // 模块8：入库管理\n  const module8 = namespace.addObject({\n    organizedBy: prodLine,\n    browseName: \"module8_inventory_management\"\n  });\n  namespace.addVariable({\n    componentOf: module8,\n    browseName: \"module_status\",\n    nodeId: \"ns=1;s=precast_concrete_productionline1.module8_inventory_management.module_status\",\n    dataType: \"Int32\",\n    value: {\n      get: () => new Variant({\n        dataType: DataType.Int32,\n        value: flexServerInternals.sandboxFlowContext.get(\"precast_concrete_productionline1.module8_inventory_management.module_status\") || 0\n      }),\n      set: (variant) => {\n        flexServerInternals.sandboxFlowContext.set(\"precast_concrete_productionline1.module8_inventory_management.module_status\", variant.value);\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n  const inventoryObj = namespace.addObject({ organizedBy: module8, browseName: \"inventory\" });\n  [\n    { name: \"total_products\", path: \"inventory.total_products\", dataType: \"Int32\" },\n    { name: \"today_in\", path: \"inventory.today_in\", dataType: \"Int32\" },\n    { name: \"today_out\", path: \"inventory.today_out\", dataType: \"Int32\" },\n    { name: \"available_space\", path: \"inventory.available_space\", dataType: \"Double\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: inventoryObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module8.inventory.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module8_inventory_management.${v.path}`) || 0\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module8_inventory_management.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n  const logisticsObj = namespace.addObject({ organizedBy: module8, browseName: \"logistics\" });\n  [\n    { name: \"pending_orders\", path: \"logistics.pending_orders\", dataType: \"Int32\" },\n    { name: \"shipping_today\", path: \"logistics.shipping_today\", dataType: \"Int32\" },\n    { name: \"location_A\", path: \"logistics.location_A\", dataType: \"Int32\" },\n    { name: \"location_B\", path: \"logistics.location_B\", dataType: \"Int32\" },\n    { name: \"location_C\", path: \"logistics.location_C\", dataType: \"Int32\" }\n  ].forEach(v => {\n    namespace.addVariable({\n      componentOf: logisticsObj,\n      browseName: v.name,\n      nodeId: `ns=1;s=precast_line1.module8.logistics.${v.name}`,\n      dataType: v.dataType,\n      value: {\n        get: () => new Variant({\n          dataType: DataType[v.dataType],\n          value: flexServerInternals.sandboxFlowContext.get(`precast_concrete_productionline1.module8_inventory_management.${v.path}`) || 0\n        }),\n        set: (variant) => {\n          flexServerInternals.sandboxFlowContext.set(`precast_concrete_productionline1.module8_inventory_management.${v.path}`, variant.value);\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  });\n\n\n  node.warn(\"Concrete Preparation (module1) address space created.\");\n  done();\n}\n",
        "x": 370,
        "y": 1200,
        "wires": []
    },
    {
        "id": "cfadf5b377f03336",
        "type": "OpcUa-Client",
        "z": "main_flow_tab",
        "d": true,
        "endpoint": "9ce077ca2aecb7b6",
        "action": "read",
        "deadbandtype": "None",
        "deadbandvalue": 0,
        "time": 5,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "useTransport": false,
        "maxChunkCount": "",
        "maxMessageSize": "",
        "receiveBufferSize": "",
        "sendBufferSize": "",
        "setstatusandtime": false,
        "keepsessionalive": false,
        "name": "Read Concrete Variables",
        "x": 270,
        "y": 1300,
        "wires": [
            [
                "7c9aeb3d4be1ae6f"
            ],
            [],
            []
        ]
    },
    {
        "id": "7c9aeb3d4be1ae6f",
        "type": "debug",
        "z": "main_flow_tab",
        "d": true,
        "name": "OPC UA Read Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 1340,
        "wires": []
    },
    {
        "id": "197582e99a9e7bed",
        "type": "inject",
        "z": "main_flow_tab",
        "d": true,
        "name": "Read productionline1_module1_cement",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "ns=1;s=precast_line1.module1.materials.cement",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 1260,
        "wires": [
            [
                "cfadf5b377f03336"
            ]
        ]
    },
    {
        "id": "331912bc0d51877c",
        "type": "comment",
        "z": "main_flow_tab",
        "name": "",
        "info": "",
        "x": 200,
        "y": 1140,
        "wires": []
    },
    {
        "id": "edf8f32d40a50994",
        "type": "function",
        "z": "main_flow_tab",
        "d": true,
        "name": "CO2-Certificate",
        "func": "// Node-RED function node代码，生成CO2证书JSON\n\nfunction randomAlphaNum(length) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for(let i=0; i<length; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n}\n\nfunction formatDateTime(date) {\n    return date.toISOString().replace('T', ' ').substring(0, 19);\n}\n\n// 生成随机排放量，0.5吨±10%\nconst baseEmission = 0.5;\nconst emission = baseEmission * (0.9 + Math.random() * 0.2); \n\n// 实时日期时间\nconst now = new Date();\nconst dateTimeStr = formatDateTime(now);\n\n// 生成随机产品批次号（8位字母数字）\nconst productBatch = randomAlphaNum(8);\n\n// 生成随机产品类型码（2位字母数字）\nconst productTypeCode = randomAlphaNum(2);\n\n// 生成签字（18位字母数字）\nconst signature = randomAlphaNum(18);\n\n// 构建证书对象\nconst co2Certificate = {\n    certificateNumber: \"CNMECO2-91120-Palaiseau-2025\",\n    issuingAuthority: \"CNMECO2\",\n    emissionData_tCO2e: Number(emission.toFixed(3)),\n    accountingStandard: \"GHG Protocol\",\n    projectDetails: {\n        organizationName: \"北方新晨工业集团\",\n        productBatch: productBatch,\n        productTypeCode: productTypeCode,\n        timestamp: dateTimeStr\n    },\n    organizationLocation: \"Télecom Paris, Institut de polytechnique de Paris.\",\n    projectNameAndType: \"绿色节能建筑材料\",\n    accountingPeriod: 2025,\n    auditVerification: \"通过\",\n    validityPeriod: \"1年\",\n    usageRestriction: \"欧洲境内使用\",\n    issueDateAndSignature: {\n        issueDate: dateTimeStr,\n        signature: signature\n    }\n};\n\nmsg.payload = co2Certificate;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1420,
        "wires": [
            [
                "1a2bcf57edf5fa7d"
            ]
        ]
    },
    {
        "id": "1a2bcf57edf5fa7d",
        "type": "debug",
        "z": "main_flow_tab",
        "d": true,
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 1480,
        "wires": []
    },
    {
        "id": "4044ca4f130e1c36",
        "type": "inject",
        "z": "main_flow_tab",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 1480,
        "wires": [
            [
                "edf8f32d40a50994"
            ]
        ]
    },
    {
        "id": "overview_group2",
        "type": "ui_group",
        "name": "生产统计",
        "tab": "main_overview_tab",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "overview_group3",
        "type": "ui_group",
        "name": "实时报警",
        "tab": "main_overview_tab",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m1_group1",
        "type": "ui_group",
        "name": "原料状态",
        "tab": "module1_tab",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m1_group2",
        "type": "ui_group",
        "name": "搅拌设备",
        "tab": "module1_tab",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m1_group3",
        "type": "ui_group",
        "name": "质量参数",
        "tab": "module1_tab",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m2_group1",
        "type": "ui_group",
        "name": "模具信息",
        "tab": "module2_tab",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m2_group2",
        "type": "ui_group",
        "name": "组装状态",
        "tab": "module2_tab",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m3_group1",
        "type": "ui_group",
        "name": "钢筋安装",
        "tab": "module3_tab",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m3_group2",
        "type": "ui_group",
        "name": "网片安装",
        "tab": "module3_tab",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m4_group1",
        "type": "ui_group",
        "name": "浇筑过程",
        "tab": "module4_tab",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m4_group2",
        "type": "ui_group",
        "name": "振捣过程",
        "tab": "module4_tab",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m5_group1",
        "type": "ui_group",
        "name": "养护仓1",
        "tab": "module5_tab",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m5_group2",
        "type": "ui_group",
        "name": "养护仓2",
        "tab": "module5_tab",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m6_group1",
        "type": "ui_group",
        "name": "脱模工序",
        "tab": "module6_tab",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m6_group2",
        "type": "ui_group",
        "name": "起吊工序",
        "tab": "module6_tab",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m7_group1",
        "type": "ui_group",
        "name": "尺寸与外观",
        "tab": "module7_tab",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m7_group2",
        "type": "ui_group",
        "name": "质量检验",
        "tab": "module7_tab",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m8_group1",
        "type": "ui_group",
        "name": "库存信息",
        "tab": "module8_tab",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "m8_group2",
        "type": "ui_group",
        "name": "物流管理",
        "tab": "module8_tab",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "overview_group1",
        "type": "ui_group",
        "name": "生产线状态",
        "tab": "main_overview_tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "group_stats",
        "type": "ui_group",
        "name": "生产统计",
        "tab": "tab_main",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false
    },
    {
        "id": "group_modules",
        "type": "ui_group",
        "name": "模块状态",
        "tab": "tab_main",
        "order": 2,
        "disp": true,
        "width": 12,
        "collapse": false
    },
    {
        "id": "group_alarms",
        "type": "ui_group",
        "name": "告警信息",
        "tab": "tab_main",
        "order": 3,
        "disp": true,
        "width": 12,
        "collapse": false
    },
    {
        "id": "9ce077ca2aecb7b6",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://127.0.0.1:4842",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "main_overview_tab",
        "type": "ui_tab",
        "name": "生产总览",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "module1_tab",
        "type": "ui_tab",
        "name": "混凝土制备",
        "icon": "build",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "module2_tab",
        "type": "ui_tab",
        "name": "模具组装",
        "icon": "view_module",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "module3_tab",
        "type": "ui_tab",
        "name": "钢筋网片安装",
        "icon": "grid_on",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "module4_tab",
        "type": "ui_tab",
        "name": "混凝土浇筑",
        "icon": "opacity",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "module5_tab",
        "type": "ui_tab",
        "name": "养护",
        "icon": "thermostat",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "module6_tab",
        "type": "ui_tab",
        "name": "脱模与起吊",
        "icon": "elevator",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "module7_tab",
        "type": "ui_tab",
        "name": "成品质检",
        "icon": "verified",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "module8_tab",
        "type": "ui_tab",
        "name": "入库管理",
        "icon": "inventory",
        "order": 12,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "tab_main",
        "type": "ui_tab",
        "name": "生产监控",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]